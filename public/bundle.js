// Generated by purs bundle 0.13.2
var PS = {};
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];                    
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["functorArray"] = functorArray;
})(PS);
(function(exports) {
  "use strict";

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];                 
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.foreachE = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
  exports["foreachE"] = $foreign.foreachE;
})(PS);
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.setCanvasWidth = function(canvas) {
      return function(width) {
          return function() {
              canvas.width = width;
          };
      };
  };

  exports.setCanvasHeight = function(canvas) {
      return function(height) {
          return function() {
              canvas.height = height;
          };
      };
  };

  exports.setFillStyle = function(ctx) {
      return function(style) {
          return function() {
              ctx.fillStyle = style;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
      };
  };

  exports.fill = function(ctx) {
      return function() {
          ctx.fill();
      };
  };

  exports.moveTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.moveTo(x, y);
              };
          };
      };
  };

  exports.arc = function(ctx) {
      return function(a) {
          return function() {
              ctx.arc(a.x, a.y, a.radius, a.start, a.end);
          };
      };
  };

  exports.clearRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.clearRect(r.x, r.y, r.width, r.height);
          };
      };
  };

  exports.scale = function(ctx) {
      return function(t) {
          return function() {
              ctx.scale(t.scaleX, t.scaleY);
          };
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Graphics.Canvas"] = $PS["Graphics.Canvas"] || {};
  var exports = $PS["Graphics.Canvas"];
  var $foreign = $PS["Graphics.Canvas"];
  var Data_Maybe = $PS["Data.Maybe"];
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["setCanvasWidth"] = $foreign.setCanvasWidth;
  exports["setCanvasHeight"] = $foreign.setCanvasHeight;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["beginPath"] = $foreign.beginPath;
  exports["fill"] = $foreign.fill;
  exports["moveTo"] = $foreign.moveTo;
  exports["arc"] = $foreign.arc;
  exports["clearRect"] = $foreign.clearRect;
  exports["scale"] = $foreign.scale;
})(PS);
(function(exports) {
  "use strict";          

  exports.floor = Math.floor;

  exports.pow = function (n) {
    return function (p) {
      return Math.pow(n, p);
    };
  };                     

  exports.sqrt = Math.sqrt;    

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["floor"] = $foreign.floor;
  exports["pow"] = $foreign.pow;
  exports["sqrt"] = $foreign.sqrt;
  exports["pi"] = $foreign.pi;
})(PS);
(function(exports) {
  "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS);
(function(exports) {
  /* global window */
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Web.HTML"] = $PS["Web.HTML"] || {};
  var exports = $PS["Web.HTML"];
  var $foreign = $PS["Web.HTML"];
  exports["window"] = $foreign.window;
})(PS);
(function(exports) {
  "use strict";

  exports.innerWidth = function (window) {
    return function () {
      return window.innerWidth;
    };
  };

  exports.innerHeight = function (window) {
    return function () {
      return window.innerHeight;
    };
  };

  exports._requestAnimationFrame = function(fn) {
    return function(window) {
      return function() {
        return window.requestAnimationFrame(fn);
      };
    };
  };
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Web.HTML.Window"] = $PS["Web.HTML.Window"] || {};
  var exports = $PS["Web.HTML.Window"];
  var $foreign = $PS["Web.HTML.Window"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var RequestAnimationFrameId = function (x) {
      return x;
  };
  var requestAnimationFrame = function (fn) {
      var $33 = Data_Functor.map(Effect.functorEffect)(RequestAnimationFrameId);
      var $34 = $foreign["_requestAnimationFrame"](fn);
      return function ($35) {
          return $33($34($35));
      };
  };
  exports["requestAnimationFrame"] = requestAnimationFrame;
  exports["innerWidth"] = $foreign.innerWidth;
  exports["innerHeight"] = $foreign.innerHeight;
})(PS);
(function($PS) {
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect = $PS["Effect"];
  var Graphics_Canvas = $PS["Graphics.Canvas"];
  var $$Math = $PS["Math"];
  var Partial = $PS["Partial"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];                
  var verletVel = function (vel) {
      return function (currAccel) {
          return function (nextAccel) {
              return function (dt) {
                  return {
                      x: vel.x + 0.5 * (nextAccel.x + currAccel.x) * dt,
                      y: vel.y + 0.5 * (nextAccel.y + currAccel.y) * dt
                  };
              };
          };
      };
  };
  var verletPos = function (pos) {
      return function (vel) {
          return function (currAccel) {
              return function (dt) {
                  return {
                      x: pos.x + vel.x * dt + 0.5 * currAccel.x * $$Math.pow(dt)(2.0),
                      y: pos.y + vel.y * dt + 0.5 * currAccel.y * $$Math.pow(dt)(2.0)
                  };
              };
          };
      };
  };
  var initialVelocity = function (ratio) {
      return function (ecc) {
          return $$Math.sqrt(1.0 + ratio) * (1.0 + ecc);
      };
  };
  var initialState = function (massRatio) {
      return function (eccentricity) {
          return {
              pos: {
                  x: 1.0,
                  y: 0.0
              },
              vel: {
                  x: 0.0,
                  y: initialVelocity(1.0)(eccentricity)
              },
              masses: {
                  m1: 1.0,
                  m2: massRatio,
                  ratio: massRatio,
                  total: 1.0 + massRatio
              },
              positions: [ {
                  x: 0.0,
                  y: 0.0
              }, {
                  x: 0.0,
                  y: 0.0
              } ]
          };
      };
  };
  var hypotenuse = function (v) {
      return $$Math.sqrt($$Math.pow(v.x)(2.0) + $$Math.pow(v.y)(2.0));
  };
  var getCanvas = function (dictPartial) {
      return function __do() {
          var v = Graphics_Canvas.getCanvasElementById("canvas")();
          if (v instanceof Data_Maybe.Nothing) {
              return Partial.crashWith(dictPartial)("Canvas not found")();
          };
          if (v instanceof Data_Maybe.Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Main (line 82, column 3 - line 84, column 31): " + [ v.constructor.name ]);
      };
  };
  var consts = {
      eccentricity: 0.7,
      gravity: 12.5,
      massRatio: 1.0,
      timeStep: 5.0e-3
  };
  var config = {
      bodyColor: "#ffffff",
      bodyRadius: 8.0,
      pixelRatio: 2.0,
      scale: 300.0
  };
  var scaleCanvas = function (wind) {
      return function (canv) {
          return function (ctx) {
              return function __do() {
                  var v = Web_HTML_Window.innerWidth(wind)();
                  var v1 = Web_HTML_Window.innerHeight(wind)();
                  Graphics_Canvas.setCanvasWidth(canv)(config.pixelRatio * Data_Int.toNumber(v))();
                  Graphics_Canvas.setCanvasHeight(canv)(config.pixelRatio * Data_Int.toNumber(v1))();
                  return Graphics_Canvas.scale(ctx)({
                      scaleX: config.pixelRatio,
                      scaleY: config.pixelRatio
                  })();
              };
          };
      };
  };
  var translatePos = function (v) {
      return function (v1) {
          var middleY = $$Math.floor(v.height / 2.0);
          var middleX = $$Math.floor(v.width / 2.0);
          var centerY = v1.y * config.scale + middleY;
          var centerX = v1.x * config.scale + middleX;
          return {
              x: centerX,
              y: centerY
          };
      };
  };
  var render = function (dims) {
      return function (ctx) {
          return function (state) {
              var end = 2.0 * $$Math.pi;
              return function __do() {
                  Graphics_Canvas.clearRect(ctx)({
                      width: dims.width,
                      height: dims.height,
                      x: 0.0,
                      y: 0.0
                  })();
                  Graphics_Canvas.beginPath(ctx)();
                  Effect.foreachE(Data_Functor.mapFlipped(Data_Functor.functorArray)(state.positions)(translatePos(dims)))(function (v) {
                      return function __do() {
                          Graphics_Canvas.moveTo(ctx)(v.x + config.bodyRadius)(v.y)();
                          return Graphics_Canvas.arc(ctx)({
                              x: v.x,
                              y: v.y,
                              radius: config.bodyRadius,
                              start: 0.0,
                              end: end
                          })();
                      };
                  })();
                  Graphics_Canvas.setFillStyle(ctx)(config.bodyColor)();
                  return Graphics_Canvas.fill(ctx)();
              };
          };
      };
  };
  var accel = function (v) {
      return function (radius) {
          return function (unitVect) {
              var scalar = -(consts.gravity * v.m1 * v.m2) / $$Math.pow(radius)(2.0);
              var accelY = scalar * unitVect.y;
              var accelX = scalar * unitVect.x;
              return {
                  x: accelX,
                  y: accelY
              };
          };
      };
  };
  var updateState = function (state) {
      return function (deltaTime) {
          var radius = hypotenuse(state.pos);
          var unitVect = {
              x: state.pos.x / radius,
              y: state.pos.y / radius
          };
          var currAccel = accel(state.masses)(radius)(unitVect);
          var newPos = verletPos(state.pos)(state.vel)(currAccel)(deltaTime);
          var newRadius = hypotenuse(newPos);
          var newUnitVect = {
              x: newPos.x / newRadius,
              y: newPos.y / newRadius
          };
          var newAccel = accel(state.masses)(newRadius)(newUnitVect);
          var newVel = verletVel(state.vel)(currAccel)(newAccel)(deltaTime);
          var a2 = state.masses.m2 / state.masses.total;
          var a1 = state.masses.m1 / state.masses.total;
          return {
              pos: newPos,
              vel: newVel,
              masses: state.masses,
              positions: [ {
                  x: a1 * newPos.x,
                  y: a1 * newPos.y
              }, {
                  x: -a2 * newPos.x,
                  y: -a2 * newPos.y
              } ]
          };
      };
  };
  var simulate = function (wind) {
      return function (dims) {
          return function (ctx) {
              return function (state) {
                  var newState = updateState(state)(consts.timeStep);
                  return function __do() {
                      render(dims)(ctx)(newState)();
                      return Data_Functor["void"](Effect.functorEffect)(Web_HTML_Window.requestAnimationFrame(simulate(wind)(dims)(ctx)(newState))(wind))();
                  };
              };
          };
      };
  };
  var main = function __do() {
      var v = getCanvas()();
      var v1 = Graphics_Canvas.getContext2D(v)();
      var v2 = Web_HTML.window();
      var v3 = Web_HTML_Window.innerWidth(v2)();
      var v4 = Web_HTML_Window.innerHeight(v2)();
      scaleCanvas(v2)(v)(v1)();
      var state = initialState(consts.massRatio)(consts.eccentricity);
      var dims = {
          width: Data_Int.toNumber(v3),
          height: Data_Int.toNumber(v4)
      };
      return Data_Functor["void"](Effect.functorEffect)(Web_HTML_Window.requestAnimationFrame(simulate(v2)(dims)(v1)(state))(v2))();
  };
  exports["consts"] = consts;
  exports["config"] = config;
  exports["main"] = main;
  exports["getCanvas"] = getCanvas;
  exports["scaleCanvas"] = scaleCanvas;
  exports["simulate"] = simulate;
  exports["render"] = render;
  exports["initialState"] = initialState;
  exports["updateState"] = updateState;
  exports["accel"] = accel;
  exports["verletPos"] = verletPos;
  exports["verletVel"] = verletVel;
  exports["hypotenuse"] = hypotenuse;
  exports["initialVelocity"] = initialVelocity;
  exports["translatePos"] = translatePos;
})(PS);
PS["Main"].main();